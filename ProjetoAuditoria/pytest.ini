[tool:pytest]
# Configuração do pytest para o sistema de Auditoria SEO Técnica Automatizada

# Diretórios onde o pytest deve procurar por testes
testpaths = tests

# Padrões de arquivos de teste
python_files = test_*.py *_test.py

# Padrões de classes de teste
python_classes = Test*

# Padrões de funções de teste
python_functions = test_*

# Opções padrão para execução dos testes
addopts = 
    -v
    --tb=short
    --strict-markers
    --strict-config
    --color=yes
    --durations=10
    --cov=app
    --cov-report=html:htmlcov
    --cov-report=term-missing
    --cov-fail-under=80

# Marcadores personalizados para categorizar testes
markers =
    unit: Testes unitários rápidos
    integration: Testes de integração que podem ser mais lentos
    api: Testes relacionados às APIs externas (GA4, GSC, PSI)
    database: Testes relacionados ao banco de dados SQLite
    crawler: Testes relacionados ao Screaming Frog Crawler
    chrome: Testes relacionados ao Chrome DevTools MCP
    performance: Testes de performance e carga
    slow: Testes que demoram mais para executar
    external: Testes que dependem de recursos externos
    mock: Testes que usam mocks extensivamente

# Filtros de warnings
filterwarnings =
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning

# Configurações de logging durante os testes
log_cli = false
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Configurações para testes em paralelo (se pytest-xdist estiver instalado)
# Para executar: pytest -n auto
# Número de workers será determinado automaticamente

# Timeout para testes individuais (em segundos)
timeout = 300

# Configurações para testes de cobertura
[coverage:run]
source = app
omit = 
    */tests/*
    */venv/*
    */__pycache__/*
    */migrations/*
    */conftest.py

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod